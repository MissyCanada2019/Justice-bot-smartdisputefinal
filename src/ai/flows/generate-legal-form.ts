'use server';
/**
 * @fileOverview Generates auto-filled content for a legal form based on a user's dispute details.
 *
 * - generateLegalForm - A function that generates legal form content.
 * - GenerateLegalFormInput - The input type for the generateLegalForm function.
 * - GenerateLegalFormOutput - The return type for the generateLegalForm function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

export const GenerateLegalFormInputSchema = z.object({
  caseClassification: z
    .string()
    .describe('The classification of the legal issue (e.g., "Landlord/Tenant Dispute", "Family Law - Custody").'),
  disputeDetails: z
    .string()
    .describe('A detailed description of the legal issue, including key events, dates, and people involved.'),
  suggestedAvenues: z
    .string()
    .describe('The suggested next steps from the initial case assessment.'),
});
export type GenerateLegalFormInput = z.infer<typeof GenerateLegalFormInputSchema>;

const FormSectionSchema = z.object({
    sectionTitle: z.string().describe("The title of this section of the legal form (e.g., 'Part 1: General Information', 'Reasons for Your Application')."),
    sectionContent: z.string().describe("The auto-filled content for this section, written in clear, formal language suitable for a legal document. This content should be generated by summarizing and structuring the user's dispute details."),
});

export const GenerateLegalFormOutputSchema = z.object({
    suggestedForm: z.string().describe('The name of the most appropriate legal form based on the case classification and details (e.g., "T2: Application about Tenant Rights").'),
    formSections: z.array(FormSectionSchema).describe('An array of auto-filled sections for the legal form.'),
});
export type GenerateLegalFormOutput = z.infer<typeof GenerateLegalFormOutputSchema>;

export async function generateLegalForm(input: GenerateLegalFormInput): Promise<GenerateLegalFormOutput> {
  return generateLegalFormFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateLegalFormPrompt',
  input: {schema: GenerateLegalFormInputSchema},
  output: {schema: GenerateLegalFormOutputSchema},
  system: `You are an expert Canadian legal assistant AI. Your task is to act as a form-filler.
Based on the user's case details, you must:
1.  Identify the single most appropriate legal form (e.g., "T2: Application about Tenant Rights", "Form 1: Application - Human Rights Tribunal of Ontario"). Use the provided case classification and suggested avenues to determine the best form.
2.  Take the user's detailed narrative ('disputeDetails') and break it down into structured, formal content suitable for filling out a legal form.
3.  Organize this content into logical sections, such as 'General Information', 'Reasons for Application', and 'Remedies Requested'.
4.  Write the content for each section clearly and concisely, as if you were filling out the official document on the user's behalf.
`,
  prompt: `Please generate the content for a legal form based on the following case:

Case Classification: {{{caseClassification}}}

Suggested Avenues: {{{suggestedAvenues}}}

Dispute Details (Narrative from user):
{{{disputeDetails}}}
`,
});

const generateLegalFormFlow = ai.defineFlow(
  {
    name: 'generateLegalFormFlow',
    inputSchema: GenerateLegalFormInputSchema,
    outputSchema: GenerateLegalFormOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
