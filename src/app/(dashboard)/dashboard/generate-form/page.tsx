'use client';

import { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import {
  generateLegalForm,
  GenerateLegalFormOutput,
} from '@/ai/flows/generate-legal-form';
import { AssessDisputeMeritOutput } from '@/ai/flows/assess-dispute-merit';
import { FilePlus2, Loader2, AlertCircle, Download, FileText, Lock } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Skeleton } from '@/components/ui/skeleton';
import jsPDF from 'jspdf';
import { useAuth } from '@/hooks/use-auth';

export default function GenerateFormPage() {
  const [assessment, setAssessment] = useState<AssessDisputeMeritOutput | null>(null);
  const [formContent, setFormContent] = useState<GenerateLegalFormOutput | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasPaid, setHasPaid] = useState(false);
  const { toast } = useToast();
  const { isFreeTier } = useAuth();

  useEffect(() => {
    try {
      if (typeof window !== 'undefined') {
        const storedAssessment = localStorage.getItem('caseAssessment');
        if (storedAssessment) {
          const parsedAssessment = JSON.parse(storedAssessment) as AssessDisputeMeritOutput;
          setAssessment(parsedAssessment);
        }
        
        const paymentStatus = localStorage.getItem('justiceBotPaymentStatus');
        if (paymentStatus === 'paid') {
          setHasPaid(true);
        }
      }
    } catch (e) {
        console.error("Error reading from local storage", e);
        setError("Could not load your case data. Please submit your dispute again.");
    }

    // Listen for storage changes to update payment status across tabs
    const handleStorageChange = () => {
      if (localStorage.getItem('justiceBotPaymentStatus') === 'paid') {
        setHasPaid(true);
      }
    };
    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);

  }, []);

  const handleGenerateClick = async () => {
    if (!assessment) {
        toast({
            title: 'No Case Data',
            description: 'Please submit a dispute before generating a form.',
            variant: 'destructive'
        });
        return;
    }
    setLoading(true);
    setError(null);
    setFormContent(null);
    try {
        const output = await generateLegalForm({
            caseClassification: assessment.caseClassification,
            disputeDetails: assessment.analysis, // Using analysis for better context
            suggestedAvenues: assessment.suggestedAvenues,
        });
        setFormContent(output);
    } catch (err) {
        console.error(err);
        setError('Failed to generate the form content. The AI may be experiencing high load. Please try again later.');
        toast({
            title: 'Form Generation Failed',
            description: 'An error occurred while generating the form.',
            variant: 'destructive',
        });
    } finally {
        setLoading(false);
    }
  }

  const handleDownloadPdf = () => {
    if (!formContent) return;

    const doc = new jsPDF({
      orientation: 'p',
      unit: 'mm',
      format: 'a4'
    });

    const safeFilename = formContent.suggestedForm.replace(/[^a-z0-9]/gi, '_').toLowerCase();
    
    // Set properties
    doc.setProperties({
        title: `Content for ${formContent.suggestedForm}`
    });
    
    // Add a header
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text(`Generated Content for: ${formContent.suggestedForm}`, 15, 20);
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`Generated by JusticeBot.AI on ${new Date().toLocaleDateString()}`, 15, 25);
    doc.line(15, 28, 195, 28); // horizontal line

    let y = 40;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 15;

    formContent.formSections.forEach(section => {
        if (y + 20 > pageHeight - margin) {
            doc.addPage();
            y = 20;
        }

        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text(section.sectionTitle, margin, y);
        y += 8;

        doc.setFontSize(12);
        doc.setFont('helvetica', 'normal');
        
        // The splitTextToSize method handles line wrapping automatically
        const contentLines = doc.splitTextToSize(section.sectionContent, 180); 

        // Check if content fits on the current page
        if (y + (contentLines.length * 7) > pageHeight - margin) {
            doc.addPage();
            y = 20;
        }

        doc.text(contentLines, margin, y);
        y += (contentLines.length * 7) + 10; // Adjust spacing after section
    });

    doc.save(`${safeFilename}_content.pdf`);
  };

  if (!assessment && !loading) {
    return (
      <Alert>
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>No Case Data Found</AlertTitle>
        <AlertDescription>
          You need to submit a dispute for analysis before a form can be generated.
          <Button asChild className="mt-4">
            <Link href="/dashboard/submit-dispute">Submit a Dispute</Link>
          </Button>
        </AlertDescription>
      </Alert>
    );
  }

  const canDownload = isFreeTier || hasPaid;

  return (
    <div className="space-y-8">
        <div className="flex items-center gap-4">
            <FilePlus2 className="h-8 w-8 text-primary" />
            <div>
            <h1 className="text-3xl font-bold tracking-tight font-headline">
                AI Form Generator
            </h1>
            <p className="text-muted-foreground">
                Auto-fill legal forms based on your case details.
            </p>
            </div>
        </div>

        {assessment && !formContent && (
            <Card>
                <CardHeader>
                    <CardTitle>Ready to Generate Your Form?</CardTitle>
                    <CardDescription>
                        Based on your case assessment for <span className="font-semibold text-primary">{assessment.caseClassification}</span>, we can generate a draft of the relevant legal form.
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <p className="text-sm text-muted-foreground">
                        The AI will structure the information you provided into the standard sections of the legal form. You can review and edit the content before downloading.
                    </p>
                </CardContent>
                <CardFooter>
                    <Button onClick={handleGenerateClick} disabled={loading}>
                        {loading ? (
                            <>
                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                Generating...
                            </>
                        ) : 'Generate Form Content'}
                    </Button>
                </CardFooter>
            </Card>
        )}

        {loading && (
            <Card>
                <CardHeader>
                    <Skeleton className="h-6 w-1/3" />
                    <Skeleton className="h-4 w-1/2" />
                </CardHeader>
                <CardContent className="space-y-6">
                    <div className="space-y-2">
                        <Skeleton className="h-4 w-[150px]" />
                        <Skeleton className="h-20 w-full" />
                    </div>
                     <div className="space-y-2">
                        <Skeleton className="h-4 w-[150px]" />
                        <Skeleton className="h-20 w-full" />
                    </div>
                </CardContent>
            </Card>
        )}
        
        {error && (
            <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>{error}</AlertDescription>
            </Alert>
        )}

        {formContent && (
            <Card className="border-primary">
                <CardHeader>
                    <CardTitle className="font-headline text-2xl">Generated Form: {formContent.suggestedForm}</CardTitle>
                    <CardDescription>
                        Below is a preview of your auto-filled form. Review each section carefully. This is not legal advice.
                    </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                    {formContent.formSections.map((section, index) => (
                        <Card key={index}>
                            <CardHeader>
                                <CardTitle className="text-lg flex items-center gap-2 font-headline">
                                    <FileText className="h-5 w-5"/>
                                    {section.sectionTitle}
                                </CardTitle>
                            </CardHeader>
                            <CardContent>
                                <p className="text-muted-foreground text-sm whitespace-pre-wrap">{section.sectionContent}</p>
                            </CardContent>
                        </Card>
                    ))}
                </CardContent>
                <CardFooter className="flex-wrap gap-4">
                    {canDownload ? (
                        <Button onClick={handleDownloadPdf}>
                            <Download className="mr-2 h-4 w-4" />
                            Download as PDF
                        </Button>
                    ) : (
                        <Button asChild>
                            <Link href="/dashboard/billing">
                                <Lock className="mr-2 h-4 w-4" />
                                Unlock PDF Download
                            </Link>
                        </Button>
                    )}
                    {!isFreeTier && !hasPaid && (
                        <p className="text-sm text-muted-foreground">
                            A one-time payment is required to download the document as a PDF.
                        </p>
                    )}
                     {isFreeTier && (
                        <p className="text-sm text-muted-foreground">
                            As an early user, you have free access to PDF downloads.
                        </p>
                    )}
                </CardFooter>
            </Card>
        )}
    </div>
  );
}
